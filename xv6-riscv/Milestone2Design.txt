---
title: Project Milestone 2
Authors: Tanner Staus, Amruth Annavaram, Kallen Selby
Date: 5/12/2025
---

High Level Description
======================

This project is intended to add multithreading to the xv6 OS. We will be doing this through adding "Knife_threads" which are threads that allocate their own space, and keep track of their stack and id. Added thread functionality includes easy thread exiting, through the ability to exit early and signal the parent that it has finished.


Thread Creation
===============

1. Which register from the thread's trapframe is used to determine where its stack starts?
The stack pointer.
2. Does the user or kernel create new stacks for each process?
The kernel.
3. Which register from threads trapframe will influence where the thread will start executing?
Program counter

4. Track lineage relationships between threads of the same process?
Thread ID

Stack Separation
================

1. How threads get assigned different stacks? (Even though they are still in separate address spaces?)
Each thread is basically getting a seperate portion of the memory that is being treated as a stack.
It is based on offsets of the original/previous address.

Test Cases
==========

1. Describe test case used for creation of threads
Test case 1 makes sure that threads can be created and contain an argument
Test case 2 makes sure that the threads can do things repeatedly. Notably,
if we remove the sleeps, the output is jumbled, proof of the two processes
working at once and writing over eachother's outputs.

Additional Comments
===================


