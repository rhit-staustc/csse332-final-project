---
title: Project Milestone 3
Author(s): Amruth Annavaram, Tanner Staus, Kallen Selby
Date: 5/19/25
---

High level description
======================

Add a high level description of your project here. Make sure to summarize all
the features that you have designed.

Thread creation
================

Describe the decisions you have made for thread create, including answers to
the questions above.

Memory sharing
===============

Describe how you have implemented the sharing of the address space in this
milestone, including answers to any questions in the description above.

In kalloc.c, we added an refcount[], indexed by page number. kref_inc(pa) and kref_dec(pa) increment and decrement the reference count. kalloc initializes a page with refcount = 1, and kfree frees RAM only when refcount reaches zero.

In vm.c, we daded uvmshare(src, dest, sz), which walks the parent's page table, remaps each present user PTE into the child pagetable with the same permissions, and calls kref_inc. Holes in the address space are skipped.

In proc.c, we now call uvmshare, then map a new page as the new thread's user stack. The stack address is calculated with PGROUNDUP(proc->sz) + tid * PGSIZE, which is deterministic and non-overlapping.

We replaced the old uvmfree with uvmfree_shared, which iterates over the exiting thread's mappings: for each leaf PTE it calls kref_dec and frees only when the refcount is 0, then deletes the PTE. This guarantees the requirement that pages survive until the last thread that references them exits, while page table pages are still freed immediately by freewalk.

Test cases
===========

- Describe the test case you used for the creation of the threads.

- Describe the test case you used for testing shared memory between threads.

Additional comments
==================

Add any addition comments, questions, or design decisions that you are
considering for the final submission.

Grade
======

The grade you believe should be assigned to your group, with some argument as
to why you chose that grade.
